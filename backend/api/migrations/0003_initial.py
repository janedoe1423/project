# Generated by Django 4.0.6 on 2024-11-30 05:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('api', '0002_delete_user'),
    ]

    operations = [
        migrations.CreateModel(
            name='Investor',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='investors/profile_pictures/')),
                ('title', models.CharField(max_length=100)),
                ('company', models.CharField(db_index=True, max_length=200)),
                ('bio', models.TextField()),
                ('phone', models.CharField(db_index=True, max_length=20, unique=True)),
                ('linkedin_url', models.URLField(blank=True, null=True, unique=True)),
                ('twitter_handle', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('website', models.URLField(blank=True, null=True, unique=True)),
                ('total_investments', models.PositiveIntegerField(default=0)),
                ('portfolio_companies', models.PositiveIntegerField(default=0)),
                ('successful_exits', models.PositiveIntegerField(default=0)),
                ('assets_under_management', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('pan_card', models.FileField(unique=True, upload_to='investors/documents/pan/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('pan_number', models.CharField(db_index=True, max_length=10, unique=True)),
                ('aadhar_card', models.FileField(unique=True, upload_to='investors/documents/aadhar/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('aadhar_number', models.CharField(db_index=True, max_length=12, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='investor_users', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='investor_users', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Investor',
                'verbose_name_plural': 'Investors',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InvestorExperience',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=100)),
                ('company', models.CharField(max_length=200)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('description', models.TextField()),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiences', to='api.investor')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='InvestorEducation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('degree', models.CharField(max_length=200)),
                ('school', models.CharField(max_length=200)),
                ('year', models.PositiveIntegerField()),
                ('description', models.TextField(blank=True)),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education', to='api.investor')),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='InvestorAchievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('year', models.PositiveIntegerField()),
                ('description', models.TextField()),
                ('proof_document', models.FileField(blank=True, null=True, upload_to='investors/achievements/')),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='api.investor')),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='InvestmentThesis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('preferred_stages', models.CharField(choices=[('SEED', 'Seed'), ('EARLY', 'Early Stage'), ('GROWTH', 'Growth Stage'), ('LATE', 'Late Stage')], default='SEED', max_length=20)),
                ('min_ticket_size', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_ticket_size', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('geographic_focus', models.CharField(max_length=200)),
                ('industry_focus', models.TextField()),
                ('investment_criteria', models.TextField()),
                ('investor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='investment_thesis', to='api.investor')),
            ],
            options={
                'verbose_name_plural': 'Investment Theses',
            },
        ),
        migrations.CreateModel(
            name='InvestmentPreference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('preferred_sectors', models.JSONField(default=list)),
                ('investment_philosophy', models.TextField()),
                ('due_diligence_process', models.TextField()),
                ('value_addition', models.TextField()),
                ('co_investment_preferences', models.TextField(blank=True)),
                ('exit_strategy', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('investor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='investment_preferences', to='api.investor')),
            ],
        ),
        migrations.CreateModel(
            name='Expertise',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('years_of_experience', models.PositiveIntegerField()),
                ('description', models.TextField(blank=True)),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expertise', to='api.investor')),
            ],
        ),
        migrations.CreateModel(
            name='ComplianceDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('TAX_RETURNS', 'Tax Returns'), ('BANK_STATEMENT', 'Bank Statement'), ('NET_WORTH', 'Net Worth Certificate'), ('ACCREDITED_PROOF', 'Accredited Investor Proof'), ('OTHER', 'Other Documents')], max_length=20)),
                ('file', models.FileField(upload_to='investors/compliance/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_notes', models.TextField(blank=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compliance_documents', to='api.investor')),
            ],
        ),
        migrations.AddIndex(
            model_name='investorexperience',
            index=models.Index(fields=['investor', 'start_date'], name='api_investo_investo_467441_idx'),
        ),
        migrations.AddConstraint(
            model_name='investorexperience',
            constraint=models.UniqueConstraint(fields=('investor', 'company', 'start_date'), name='unique_investor_company_experience'),
        ),
        migrations.AddConstraint(
            model_name='investoreducation',
            constraint=models.UniqueConstraint(fields=('investor', 'degree', 'school', 'year'), name='unique_investor_education'),
        ),
        migrations.AddIndex(
            model_name='investorachievement',
            index=models.Index(fields=['investor', 'year'], name='api_investo_investo_e1e0c9_idx'),
        ),
        migrations.AddIndex(
            model_name='investor',
            index=models.Index(fields=['email', 'phone'], name='api_investo_email_25004b_idx'),
        ),
        migrations.AddIndex(
            model_name='investor',
            index=models.Index(fields=['company'], name='api_investo_company_95f058_idx'),
        ),
        migrations.AddIndex(
            model_name='investor',
            index=models.Index(fields=['created_at'], name='api_investo_created_e32912_idx'),
        ),
        migrations.AddConstraint(
            model_name='expertise',
            constraint=models.UniqueConstraint(fields=('investor', 'name'), name='unique_investor_expertise'),
        ),
        migrations.AddIndex(
            model_name='compliancedocument',
            index=models.Index(fields=['investor', 'document_type'], name='api_complia_investo_963102_idx'),
        ),
        migrations.AddIndex(
            model_name='compliancedocument',
            index=models.Index(fields=['uploaded_at'], name='api_complia_uploade_6bf9c6_idx'),
        ),
        migrations.AddConstraint(
            model_name='compliancedocument',
            constraint=models.UniqueConstraint(fields=('investor', 'document_type'), name='unique_investor_document_type'),
        ),
    ]
